#!/bin/bash

# =======================================================================================
#
#                    *** Automated System Upgrade & Certificate Deployment Script ***
#
# Preamble:
#   This script is designed to simplify and standardize a series of complex system
#   administration tasks. From network configuration to core system versioning, it
#   provides a reliable and repeatable automation solution.
#
# Core Features:
#   1. Proxy Configuration:   Injects proxy server settings for the APT package manager
#                             and the global system environment.
#   2. CA Certificate Deploy: Deploys and trusts a custom or corporate root CA
#                             certificate, seamlessly integrating it into the system's
#                             trust chain.
#   3. System Maintenance:    Performs a full suite of system updates, upgrades, and
#                             cleanup routines to prepare for the release upgrade.
#   4. Release Upgrade:       Initiates and runs `do-release-upgrade` to perform the
#                             core operating system upgrade.
#
# User Guide:
#   1. [CRITICAL] Edit Certificate Content:
#      You MUST locate the `CA_CERT_CONTENT` variable block below and paste your
#      full CA certificate content, including the -----BEGIN...----- and
#      -----END...----- lines.
#
#   2. Grant Execution Permissions:
#      chmod +x upgrade.sh
#
#   3. Execute as Superuser:
#      sudo ./upgrade.sh
#
# =======================================================================================

# --- Global Settings & Constants ---

# Enable "Exit on Error" mode.
# This setting ensures that the script will terminate immediately if any command
# returns a non-zero exit code, preventing a cascade of errors in a faulty state.
set -e

# Define the proxy server address. This will be the egress point for all network requests.
PROXY_URL="http://10.33.35.10:8080"

# Define the filename for the CA certificate. This name will be used to identify it.
CA_CERT_FILENAME="custom-corp-ca.crt"

# Define the standard installation path for the CA certificate, following Debian/Ubuntu best practices.
CA_CERT_PATH="/usr/local/share/ca-certificates/${CA_CERT_FILENAME}"

#
# ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼【 USER CONFIGURATION AREA 】▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
#
# This is the only section of the script that requires manual user intervention.
# Please paste your complete CA certificate content within the quotes below.
#
CA_CERT_CONTENT="""
-----BEGIN CERTIFICATE-----
*** PASTE YOUR CA CERTIFICATE CONTENT HERE ***
-----END CERTIFICATE-----
"""
#
# ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲【 END OF CONFIGURATION 】▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲
#

# --- Function Definitions ---

# log()
# Formats and prints a standardized log header to the console.
# Helps to visually segment the script's execution flow.
# Argument: $1 - The message to be displayed in the header.
log() {
    echo ""
    echo "=================================================="
    echo " $1"
    echo "=================================================="
    echo ""
}

# check_root()
# Verifies that the script is being executed with superuser (root) privileges.
# Essential for commands that modify system-level files and settings.
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "Error: This script must be run with root privileges. Please use 'sudo ./upgrade.sh'." >&2
        exit 1
    fi
}

# check_ca_content()
# Validates that the user has replaced the placeholder certificate content.
# Prevents the script from running with an empty or invalid certificate.
check_ca_content() {
    if [[ "$CA_CERT_CONTENT" == *"PASTE YOUR CA CERTIFICATE CONTENT HERE"* ]]; then
        log "Error: Please edit the script file first."
        echo "You must paste your CA certificate content into the 'CA_CERT_CONTENT' variable before running." >&2
        exit 1
    fi
}

# setup_proxy()
# Stage 1: Configures the system-wide and APT proxy settings.
setup_proxy() {
    log "Stage 1: Configuring System and APT Proxy"

    # Configure proxy for APT
    echo "Creating proxy configuration file for APT..."
    cat <<EOF > /etc/apt/apt.conf.d/99proxy
Acquire::http::Proxy "${PROXY_URL}";
Acquire::https::Proxy "${PROXY_URL}";
Acquire::ftp::Proxy "${PROXY_URL}";
EOF
    echo "APT proxy configured: /etc/apt/apt.conf.d/99proxy"

    # Configure global environment proxy settings
    echo "Adding proxy settings to /etc/environment..."
    # Use grep -qxF to prevent duplicate entries on subsequent runs
    grep -qxF "http_proxy=\"${PROXY_URL}\"" /etc/environment || echo "http_proxy=\"${PROXY_URL}\"" >> /etc/environment
    grep -qxF "https_proxy=\"${PROXY_URL}\"" /etc/environment || echo "https_proxy=\"${PROXY_URL}\"" >> /etc/environment
    grep -qxF "ftp_proxy=\"${PROXY_URL}\"" /etc/environment || echo "ftp_proxy=\"${PROXY_URL}\"" >> /etc/environment
    grep -qxF "no_proxy=\"localhost,127.0.0.1,::1\"" /etc/environment || echo "no_proxy=\"localhost,127.0.0.1,::1\"" >> /etc/environment
    # Add uppercase versions for compatibility
    grep -qxF "HTTP_PROXY=\"${PROXY_URL}\"" /etc/environment || echo "HTTP_PROXY=\"${PROXY_URL}\"" >> /etc/environment
    grep -qxF "HTTPS_PROXY=\"${PROXY_URL}\"" /etc/environment || echo "HTTPS_PROXY=\"${PROXY_URL}\"" >> /etc/environment
    grep -qxF "FTP_PROXY=\"${PROXY_URL}\"" /etc/environment || echo "FTP_PROXY=\"${PROXY_URL}\"" >> /etc/environment
    grep -qxF "NO_PROXY=\"localhost,127.0.0.1,::1\"" /etc/environment || echo "NO_PROXY=\"localhost,127.0.0.1,::1\"" >> /etc/environment

    echo "System proxy configured: /etc/environment"
    echo "Note: These settings will take effect system-wide upon the next login."
}

# install_and_update_ca()
# Stages 2 & 3: Installs the custom CA certificate and updates the system's trust store.
install_and_update_ca() {
    log "Stage 2: Writing CA Certificate to disk"
    echo "${CA_CERT_CONTENT}" > "${CA_CERT_PATH}"
    chmod 644 "${CA_CERT_PATH}"
    echo "Certificate written to ${CA_CERT_PATH}"

    log "Stage 3: Updating System CA Trust Store"
    update-ca-certificates
    echo "System certificate trust store has been updated."
}

# update_and_clean()
# Stage 4: Performs a comprehensive system update and cleanup.
update_and_clean() {
    log "Stage 4: Performing System Update and Cleanup"

    echo "--> Remounting /tmp with execution permissions"
    mount -o remount,exec /tmp

    echo "--> Clearing old crash reports from /var/crash/"
    rm -f /var/crash/*

    echo "--> Running apt-get update..."
    apt-get update

    echo "--> Running apt-get upgrade..."
    DEBIAN_FRONTEND=noninteractive apt-get upgrade -y

    echo "--> Running apt-get dist-upgrade..."
    DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -y

    echo "--> Running apt-get autoremove..."
    DEBIAN_FRONTEND=noninteractive apt-get autoremove -y

    echo "--> Running apt-get clean..."
    apt-get clean

    echo "System update and cleanup complete."
}

# run_release_upgrade()
# Stage 5: Initiates the distribution upgrade process.
run_release_upgrade() {
    log "Stage 5: Preparing for Release Upgrade"
    echo "WARNING! The operating system release upgrade (do-release-upgrade) is about to begin."
    echo "This process can be lengthy and will require your interaction to confirm certain options."
    echo "It is STRONGLY recommended to back up all critical data before proceeding!"
    
    read -p "Have you read the warning and wish to continue? (y/N): " choice
    case "$choice" in
      y|Y )
        echo "Starting do-release-upgrade..."
        # Export proxy settings for the upgrade command's environment
        export http_proxy="${PROXY_URL}"
        export https_proxy="${PROXY_URL}"
        do-release-upgrade
        ;;
      * )
        echo "Operation cancelled by user."
        exit 0
        ;;
    esac
}

# show_verification_info()
# Stage 6: Displays post-upgrade verification instructions.
show_verification_info() {
    log "Stage 6: Post-Upgrade Verification Steps"
    echo "The release upgrade process has been initiated. If successful, the system may prompt you to reboot."
    echo "After rebooting and logging back in, please manually run the following commands to verify:"
    echo ""
    echo "1. Check the new release version:"
    echo "   lsb_release -a"
    echo ""
    echo "2. Verify proxy environment variables:"
    echo "   env | grep -i proxy"
    echo ""
    echo "3. Confirm the custom CA certificate was installed successfully:"
    echo "   ls /etc/ssl/certs/ | grep '${CA_CERT_FILENAME}'"
    echo "   Or, for a more robust check:"
    echo "   awk -v cmd='openssl x509 -noout -subject' '/BEGIN/{close(cmd)};{print | cmd}' < /etc/ssl/certs/ca-certificates.crt | grep 'Your-CA-Name'"
    echo "   (Replace 'Your-CA-Name' with the Organization or Common Name from your certificate)"
    echo ""
    echo "Script's main execution flow has completed."
}


# --- Main Execution Block ---
# Orchestrates the execution of all defined functions in the correct sequence.
main() {
    check_root
    check_ca_content
    setup_proxy
    install_and_update_ca
    update_and_clean
    run_release_upgrade
    show_verification_info
}

# Invoke the main function to start the script.
main

exit 0
