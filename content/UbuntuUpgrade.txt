22.04 & 22.04 -> 24.04)">
```bash
#!/bin/bash

# =======================================================================================
#
#                    *** Ubuntu Two-Stage Upgrade Scripts ***
#
# This file contains two separate scripts to upgrade an Ubuntu system from 20.04 to 24.04
# in two distinct stages.
#
# Script 1: upgrade_20_to_22.sh
#   - Purpose: To upgrade from Ubuntu 20.04 LTS to 22.04 LTS.
#   - Includes all necessary preparation steps, such as setting up the proxy,
#     installing certificates, stabilizing the system, and upgrading PAM modules.
#
# Script 2: upgrade_22_to_24.sh
#   - Purpose: To upgrade from Ubuntu 22.04 LTS to 24.04 LTS.
#   - This is a streamlined script that only performs the steps required for the
#     second stage of the upgrade.
#
# =======================================================================================

# =======================================================================================
#
#   Script 1: upgrade_20_to_22.sh (For upgrading from 20.04 to 22.04)
#
# =======================================================================================

(
cat <<'EOF_PART1'
#!/bin/bash

# =======================================================================================
#
#          *** Part 1: Automated Script for Upgrading from Ubuntu 20.04 to 22.04 ***
#
# Features:
#   1. Set up proxy server.
#   2. Deploy CA certificate.
#   3. Perform system stability checks and deep cleaning (with auto-retry mechanism).
#   4. Upgrade the old pam_tally module to the modern pam_faillock.
#   5. Clean up specified Vim plugins.
#   6. Execute do-release-upgrade to perform the version upgrade.
#
# =======================================================================================

# --- Global Settings & Constants ---
set -e
PROXY_URL="http://10.33.35.10:8080"
CA_CERT_FILENAME="custom-corp-ca.crt"
CA_CERT_PATH="/usr/local/share/ca-certificates/${CA_CERT_FILENAME}"

#
# ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼【 USER CONFIGURATION AREA 】▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
#
# Please paste your complete CA certificate content between the quotes below.
#
CA_CERT_CONTENT="""
-----BEGIN CERTIFICATE-----
*** PASTE YOUR CA CERTIFICATE CONTENT HERE ***
-----END CERTIFICATE-----
"""
#
# ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲【 END OF CONFIGURATION 】▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲
#

# --- Function Definitions ---
log() {
    echo ""
    echo "=================================================="
    echo " $1"
    echo "=================================================="
    echo ""
}

check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "Error: This script must be run with root privileges. Please use 'sudo ./<script_name>'" >&2
        exit 1
    fi
}

check_ca_content() {
    if [[ "$CA_CERT_CONTENT" == *"PASTE YOUR CA CERTIFICATE CONTENT HERE"* ]]; then
        log "Error: Please edit this script file first."
        echo "You must paste your CA certificate content into the 'CA_CERT_CONTENT' variable before running." >&2
        exit 1
    fi
}

# New: Auto-retry function
run_with_retry() {
    local cmd="$1"
    local retries=3
    local count=0
    local wait_time=10

    until $cmd; do
        count=$((count + 1))
        if [ $count -lt $retries ]; then
            echo "--> Command failed. Retrying in ${wait_time} seconds (${count}/${retries})..."
            sleep $wait_time
        else
            echo "--> Error: Command still failed after ${retries} retries."
            exit 1
        fi
    done
}

# Stage 1: Setting up System and APT Proxy
setup_proxy() {
    log "Stage 1: Setting up System and APT Proxy"
    echo "--> Creating proxy configuration file for APT..."
    cat <<EOF > /etc/apt/apt.conf.d/99proxy
Acquire::http::Proxy "${PROXY_URL}";
Acquire::https::Proxy "${PROXY_URL}";
Acquire::ftp::Proxy "${PROXY_URL}";
EOF
    echo "--> APT proxy configuration complete: /etc/apt/apt.conf.d/99proxy"
    echo "--> Adding proxy settings to /etc/environment..."
    grep -qxF "http_proxy=\"${PROXY_URL}\"" /etc/environment || echo "http_proxy=\"${PROXY_URL}\"" >> /etc/environment
    grep -qxF "https_proxy=\"${PROXY_URL}\"" /etc/environment || echo "https_proxy=\"${PROXY_URL}\"" >> /etc/environment
    echo "--> System proxy configuration complete: /etc/environment"
}

# Stages 2 & 3: Installing and Updating CA Certificate
install_and_update_ca() {
    log "Stages 2 & 3: Installing and Updating CA Certificate"
    echo "${CA_CERT_CONTENT}" > "${CA_CERT_PATH}"
    chmod 644 "${CA_CERT_PATH}"
    echo "--> Certificate has been written to ${CA_CERT_PATH}"
    update-ca-certificates
    echo "--> System certificate store has been updated."
}

# Stage 4: System Stabilization (with retry mechanism)
stabilize_system() {
    log "Stage 4: System Stabilization and Deep Clean"
    echo "--> Remounting /tmp with execution permissions"
    mount -o remount,exec /tmp
    echo "--> Clearing old crash reports"
    rm -f /var/crash/*
    
    echo "--> Running apt update (with auto-retry)..."
    run_with_retry "apt-get update"
    
    echo "--> Running apt upgrade (with auto-retry)..."
    run_with_retry "DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::=\"--force-confold\" upgrade -y"
    
    echo "--> Running apt dist-upgrade (with auto-retry)..."
    run_with_retry "DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::=\"--force-confold\" dist-upgrade -y"
    
    echo "--> Fixing any broken package dependencies..."
    DEBIAN_FRONTEND=noninteractive apt-get --fix-broken install -y
    echo "--> Reconfiguring any pending dpkg packages..."
    dpkg --configure -a
    echo "--> Autoremoving and purging old packages..."
    DEBIAN_FRONTEND=noninteractive apt-get autoremove --purge -y
    echo "--> Cleaning up local package cache..."
    apt-get clean
    echo "--> System stabilization and cleanup complete."
}

# Stage 5: Upgrading PAM Configuration
update_pam_configuration() {
    log "Stage 5: Upgrading PAM Configuration for Login Attempt Tracking"
    PAM_DIR="/etc/pam.d"
    echo "--> Searching for legacy pam_tally/pam_tally2 modules..."
    TALLY_FILES=$(mktemp)
    grep -lrwE "pam_tally.so|pam_tally2.so" "${PAM_DIR}" > "${TALLY_FILES}" || true
    if [ ! -s "${TALLY_FILES}" ]; then
        echo "--> No legacy pam_tally modules found. Skipping disablement."
    else
        echo "--> Found legacy PAM modules. Backing up and disabling..."
        while IFS= read -r file; do
            if [ -n "$file" ]; then
                BACKUP_FILE="${file}.bak.$(date +%F-%T)"
                cp "${file}" "${BACKUP_FILE}"
                sed -i.pre-upgrade -E 's/^(.*(pam_tally\.so|pam_tally2\.so).*)$/#\1/g' "${file}"
            fi
        done < "${TALLY_FILES}"
        echo "--> Legacy PAM modules disabled."
    fi
    rm -f "${TALLY_FILES}"

    COMMON_AUTH_FILE="/etc/pam.d/common-auth"
    echo "--> Checking for pam_faillock configuration in ${COMMON_AUTH_FILE}..."
    if [ ! -f "${COMMON_AUTH_FILE}" ]; then
        echo "--> Warning: ${COMMON_AUTH_FILE} not found. Skipping pam_faillock configuration."
    elif grep -q "pam_faillock.so" "${COMMON_AUTH_FILE}"; then
        echo "--> pam_faillock.so is already configured. No action needed."
    else
        echo "--> Configuring pam_faillock.so..."
        BACKUP_FILE="${COMMON_AUTH_FILE}.bak.$(date +%F-%T)"
        cp "${COMMON_AUTH_FILE}" "${BACKUP_FILE}"
        PREAUTH_LINE="auth        required      pam_faillock.so preauth audit silent"
        AUTHFAIL_LINE="auth        [default=die] pam_faillock.so authfail audit deny=3 unlock_time=900"
        sed -i.faillock-update -e "/^auth/i ${PREAUTH_LINE}" "${COMMON_AUTH_FILE}"
        sed -i.faillock-update -e "/pam_unix.so/a ${AUTHFAIL_LINE}" "${COMMON_AUTH_FILE}"
        echo "--> Successfully configured pam_faillock.so."
    fi
    echo "--> Removing old tally log files..."
    rm -f /var/log/faillog /var/log/tallylog
    echo "--> PAM configuration upgrade complete."
}

# Stage 6: Cleaning Up Vim Plugins
handle_vim_plugin_cleanup() {
    log "Stage 6: Performing User-Specific Configuration Cleanup (Vim)"
    VIMRC_FILE="/root/.vimrc"
    if [ ! -f "${VIMRC_FILE}" ]; then
        echo "--> ${VIMRC_FILE} not found. Skipping Vim plugin cleanup."
        return
    fi
    if ! grep -q "^\s*Plug 'tpope/vim-fugitive'" "${VIMRC_FILE}"; then
        echo "--> vim-fugitive plugin not found or already commented out. Skipping."
        return
    fi
    echo "--> Found active vim-fugitive plugin. Proceeding with cleanup."
    VIMRC_BACKUP="/root/.vimrc.bak.$(date +%F-%T)"
    cp "${VIMRC_FILE}" "${VIMRC_BACKUP}"
    sed -i.vim-cleanup "s|^\s*Plug 'tpope/vim-fugitive'|\"&|" "${VIMRC_FILE}"
    if command -v vim &> /dev/null; then
        vim -u "${VIMRC_FILE}" -c "try | PlugClean! | catch | endtry" -c "qa!"
        echo "--> Vim 'PlugClean' process completed."
    else
        echo "--> Warning: 'vim' command not found. Cannot run PlugClean automatically."
    fi
    echo "--> Vim cleanup complete."
}

# Stage 7: Performing Release Upgrade
run_release_upgrade() {
    log "Stage 7: Preparing for Release Upgrade (20.04 -> 22.04)"
    echo "WARNING! The operating system release upgrade is about to begin."
    echo "This process can be lengthy and will require your interaction to confirm certain options."
    echo "It is STRONGLY recommended to back up all critical data before proceeding!"
    read -p "Have you read the warning and wish to continue? (y/N): " choice
    case "$choice" in
      y|Y )
        echo "Starting do-release-upgrade..."
        export http_proxy="${PROXY_URL}"
        export https_proxy="${PROXY_URL}"
        do-release-upgrade
        ;;
      * )
        echo "Operation cancelled by user."
        exit 0
        ;;
    esac
}

# --- Main Execution Block ---
main() {
    check_root
    check_ca_content
    setup_proxy
    install_and_update_ca
    stabilize_system
    update_pam_configuration
    handle_vim_plugin_cleanup
    run_release_upgrade
    log "Stage 1 (20.04 -> 22.04) upgrade script has been initiated. Please follow the prompts from do-release-upgrade."
}

main
exit 0
EOF_PART1
) > upgrade_20_to_22.sh

# =======================================================================================
#
#   Script 2: upgrade_22_to_24.sh (For upgrading from 22.04 to 24.04)
#
# =======================================================================================

(
cat <<'EOF_PART2'
#!/bin/bash

# =======================================================================================
#
#          *** Part 2: Automated Script for Upgrading from Ubuntu 22.04 to 24.04 ***
#
# Features:
#   1. Verify proxy server settings.
#   2. Verify CA certificate is installed.
#   3. Perform system stability checks and deep cleaning (with auto-retry mechanism).
#   4. Execute do-release-upgrade to perform the final version upgrade.
#
# =======================================================================================

# --- Global Settings & Constants ---
set -e
PROXY_URL="http://10.33.35.10:8080"
CA_CERT_FILENAME="custom-corp-ca.crt"
CA_CERT_PATH="/usr/local/share/ca-certificates/${CA_CERT_FILENAME}"

#
# ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼【 USER CONFIGURATION AREA 】▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
#
# Please paste your complete CA certificate content between the quotes below.
#
CA_CERT_CONTENT="""
-----BEGIN CERTIFICATE-----
*** PASTE YOUR CA CERTIFICATE CONTENT HERE ***
-----END CERTIFICATE-----
"""
#
# ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲【 END OF CONFIGURATION 】▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲
#

# --- Function Definitions ---
log() {
    echo ""
    echo "=================================================="
    echo " $1"
    echo "=================================================="
    echo ""
}

check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "Error: This script must be run with root privileges. Please use 'sudo ./<script_name>'" >&2
        exit 1
    fi
}

check_ca_content() {
    if [[ "$CA_CERT_CONTENT" == *"PASTE YOUR CA CERTIFICATE CONTENT HERE"* ]]; then
        log "Error: Please edit this script file first."
        echo "You must paste your CA certificate content into the 'CA_CERT_CONTENT' variable before running." >&2
        exit 1
    fi
}

# New: Auto-retry function
run_with_retry() {
    local cmd="$1"
    local retries=3
    local count=0
    local wait_time=10

    until $cmd; do
        count=$((count + 1))
        if [ $count -lt $retries ]; then
            echo "--> Command failed. Retrying in ${wait_time} seconds (${count}/${retries})..."
            sleep $wait_time
        else
            echo "--> Error: Command still failed after ${retries} retries."
            exit 1
        fi
    done
}

# Stage 1: Setting up System and APT Proxy
setup_proxy() {
    log "Stage 1: Setting up System and APT Proxy"
    echo "--> Creating proxy configuration file for APT..."
    cat <<EOF > /etc/apt/apt.conf.d/99proxy
Acquire::http::Proxy "${PROXY_URL}";
Acquire::https::Proxy "${PROXY_URL}";
Acquire::ftp::Proxy "${PROXY_URL}";
EOF
    echo "--> APT proxy configuration complete: /etc/apt/apt.conf.d/99proxy"
    echo "--> Adding proxy settings to /etc/environment..."
    grep -qxF "http_proxy=\"${PROXY_URL}\"" /etc/environment || echo "http_proxy=\"${PROXY_URL}\"" >> /etc/environment
    grep -qxF "https_proxy=\"${PROXY_URL}\"" /etc/environment || echo "https_proxy=\"${PROXY_URL}\"" >> /etc/environment
    echo "--> System proxy configuration complete: /etc/environment"
}

# Stage 2: Verifying CA Certificate
verify_ca_certificate() {
    log "Stage 2: Verifying CA Certificate"
    if [ ! -f "${CA_CERT_PATH}" ]; then
        echo "--> Warning: CA certificate file (${CA_CERT_PATH}) not found. Attempting to reinstall..."
        echo "${CA_CERT_CONTENT}" > "${CA_CERT_PATH}"
        chmod 644 "${CA_CERT_PATH}"
        update-ca-certificates
        echo "--> Certificate has been reinstalled and updated."
    else
        echo "--> CA certificate already exists. Verification complete."
    fi
}

# Stage 3: System Stabilization (with retry mechanism)
stabilize_system() {
    log "Stage 3: System Stabilization and Deep Clean"
    
    echo "--> Running apt update (with auto-retry)..."
    run_with_retry "apt-get update"
    
    echo "--> Running apt upgrade (with auto-retry)..."
    run_with_retry "DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::=\"--force-confold\" upgrade -y"

    echo "--> Running apt dist-upgrade (with auto-retry)..."
    run_with_retry "DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::=\"--force-confold\" dist-upgrade -y"
    
    echo "--> Fixing any broken package dependencies..."
    DEBIAN_FRONTEND=noninteractive apt-get --fix-broken install -y
    echo "--> Reconfiguring any pending dpkg packages..."
    dpkg --configure -a
    echo "--> Autoremoving and purging old packages..."
    DEBIAN_FRONTEND=noninteractive apt-get autoremove --purge -y
    echo "--> Cleaning up local package cache..."
    apt-get clean
    echo "--> System stabilization and cleanup complete."
}

# Stage 4: Performing Release Upgrade
run_release_upgrade() {
    log "Stage 4: Preparing for Release Upgrade (22.04 -> 24.04)"
    echo "WARNING! This is the final upgrade step."
    echo "This process can be lengthy and will require your interaction to confirm certain options."
    echo "It is STRONGLY recommended to verify your system backup again before proceeding!"
    read -p "Have you read the warning and wish to continue? (y/N): " choice
    case "$choice" in
      y|Y )
        echo "Starting do-release-upgrade..."
        export http_proxy="${PROXY_URL}"
        export https_proxy="${PROXY_URL}"
        do-release-upgrade
        ;;
      * )
        echo "Operation cancelled by user."
        exit 0
        ;;
    esac
}

# --- Main Execution Block ---
main() {
    check_root
    check_ca_content
    setup_proxy
    verify_ca_certificate
    stabilize_system
    run_release_upgrade
    log "Stage 2 (22.04 -> 24.04) upgrade script has been initiated. Please follow the prompts from do-release-upgrade."
}

main
exit 0
EOF_PART2
) > upgrade_22_to_24.sh

chmod +x upgrade_20_to_22.sh
chmod +x upgrade_22_to_24.sh

echo "Successfully created two upgrade scripts with auto-retry functionality:"
echo "1. upgrade_20_to_22.sh (for upgrading from 20.04 to 22.04)"
echo "2. upgrade_22_to_24.sh (for upgrading from 22.04 to 24.04)"
echo ""
echo "Instructions:"
echo "1. Edit both files and fill in your CA certificate content."
echo "2. First, on your 20.04 system, run: sudo ./upgrade_20_to_22.sh"
echo "3. After the upgrade is complete and you have rebooted, run on the new 22.04 system: sudo ./upgrade_22_to_24.sh"

```
