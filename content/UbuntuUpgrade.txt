#!/bin/bash

# =======================================================================================
#
#                    *** Ubuntu Two-Stage Upgrade Scripts ***
#
# This file contains two separate scripts to upgrade an Ubuntu system from 20.04 to 24.04
# in two distinct stages.
#
# =======================================================================================

# =======================================================================================
#
#   Script 1: upgrade_20_to_22.sh (For upgrading from 20.04 to 22.04)
#
# =======================================================================================

(
cat <<'EOF_PART1'
#!/bin/bash

# =======================================================================================
#
#          *** Part 1: Automated Script for Upgrading from Ubuntu 20.04 to 22.04 ***
#
# =======================================================================================

# --- Global Settings & Constants ---
set -e
# Proxy for the APT package manager (e.g., apt-cacher-ng)
APT_PROXY_URL="http://10.33.35.10:3142"
# Environment proxy for other connections (e.g., curl, do-release-upgrade)
ENV_PROXY_URL="http://10.33.35.10:8080"

CA_CERT_FILENAME="root-ca.crt"
CA_CERT_PATH="/usr/local/share/ca-certificates/${CA_CERT_FILENAME}"

#
# ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼【 USER CONFIGURATION AREA 】▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
#
# Please paste your complete CA certificate content between the quotes below.
#
CA_CERT_CONTENT="""
-----BEGIN CERTIFICATE-----
*** PASTE YOUR CA CERTIFICATE CONTENT HERE ***
-----END CERTIFICATE-----
"""
#
# ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲【 END OF CONFIGURATION 】▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲
#

# --- Function Definitions ---
log() {
    echo ""
    echo "=================================================="
    echo " $1"
    echo "=================================================="
    echo ""
}

check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "Error: This script must be run with root privileges. Please use 'sudo ./<script_name>'" >&2
        exit 1
    fi
}

check_ca_content() {
    if [[ "$CA_CERT_CONTENT" == *"PASTE YOUR CA CERTIFICATE CONTENT HERE"* ]]; then
        log "Error: Please edit this script file first."
        echo "You must paste your CA certificate content into the 'CA_CERT_CONTENT' variable before running." >&2
        exit 1
    fi
}

# Auto-retry function
run_with_retry() {
    local cmd="$1"
    local retries=3
    local count=0
    local wait_time=10

    until eval "$cmd"; do
        count=$((count + 1))
        if [ $count -lt $retries ]; then
            echo "--> Command failed. Retrying in ${wait_time} seconds (${count}/${retries})..."
            sleep $wait_time
        else
            echo "--> Error: Command still failed after ${retries} retries."
            exit 1
        fi
    done
}

# Proxy setup
setup_proxy() {
    log "Setting up System and APT Proxy"
    echo "--> Creating proxy configuration file for APT (${APT_PROXY_URL})..."
    cat <<EOF > /etc/apt/apt.conf.d/99proxy
Acquire::http::Proxy "${APT_PROXY_URL}";
Acquire::https::Proxy "${APT_PROXY_URL}";
Acquire::ftp::Proxy "${APT_PROXY_URL}";
EOF
    echo "--> APT proxy configuration complete: /etc/apt/apt.conf.d/99proxy"
    echo "--> Adding environment proxy settings to /etc/environment (${ENV_PROXY_URL})..."
    grep -qxF "http_proxy=\"${ENV_PROXY_URL}\"" /etc/environment || echo "http_proxy=\"${ENV_PROXY_URL}\"" >> /etc/environment
    grep -qxF "https_proxy=\"${ENV_PROXY_URL}\"" /etc/environment || echo "https_proxy=\"${ENV_PROXY_URL}\"" >> /etc/environment
    echo "--> System environment proxy configuration complete: /etc/environment"
}

# CA certificate installation
install_and_update_ca() {
    log "Installing and Updating CA Certificate"
    echo "${CA_CERT_CONTENT}" > "${CA_CERT_PATH}"
    chmod 644 "${CA_CERT_PATH}"
    echo "--> Certificate has been written to ${CA_CERT_PATH}"
    update-ca-certificates
    echo "--> System certificate store has been updated."
}

# System stabilization
stabilize_system() {
    log "Stabilizing System and Performing Deep Clean"
    echo "--> Clearing old crash reports"
    rm -f /var/crash/*
    
    echo "--> Running apt update (with auto-retry)..."
    run_with_retry "apt-get update"
    
    echo "--> Running apt upgrade (with auto-retry)..."
    run_with_retry "DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::=\"--force-confold\" upgrade -y"
    
    echo "--> Running apt dist-upgrade (with auto-retry)..."
    run_with_retry "DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::=\"--force-confold\" dist-upgrade -y"
    
    echo "--> Fixing any broken package dependencies..."
    DEBIAN_FRONTEND=noninteractive apt-get --fix-broken install -y
    echo "--> Reconfiguring any pending dpkg packages..."
    dpkg --configure -a
    echo "--> Autoremoving and purging old packages..."
    DEBIAN_FRONTEND=noninteractive apt-get autoremove --purge -y
    echo "--> Cleaning up local package cache..."
    apt-get clean
    echo "--> System stabilization and cleanup complete."
}

# PAM configuration upgrade
update_pam_configuration_standard() {
    log "Upgrading PAM Configuration: Setting up pam_faillock with pam-auth-update"
    PAM_DIR="/etc/pam.d"
    echo "--> Searching for legacy pam_tally/pam_tally2 modules..."
    TALLY_FILES=$(mktemp)
    grep -lrwE "pam_tally.so|pam_tally2.so" "${PAM_DIR}" > "${TALLY_FILES}" || true
    if [ ! -s "${TALLY_FILES}" ]; then
        echo "--> No legacy pam_tally modules found. Skipping disablement."
    else
        echo "--> Found legacy PAM modules. Backing up and disabling..."
        while IFS= read -r file; do
            if [ -n "$file" ]; then
                BACKUP_FILE="${file}.bak.$(date +%F-%T)"
                cp "${file}" "${BACKUP_FILE}"
                sed -i.pre-upgrade -E 's/^(.*(pam_tally\.so|pam_tally2\.so).*)$/#\1/g' "${file}"
            fi
        done < "${TALLY_FILES}"
        echo "--> Legacy PAM modules disabled."
    fi
    rm -f "${TALLY_FILES}"

    FAILLOCK_CONFIG_FILE="/usr/share/pam-configs/faillock"
    echo "--> Checking for faillock config file for pam-auth-update..."
    if [ -f "${FAILLOCK_CONFIG_FILE}" ]; then
        echo "--> Config file ${FAILLOCK_CONFIG_FILE} already exists. No creation needed."
    else
        echo "--> Creating ${FAILLOCK_CONFIG_FILE}..."
        cat <<'EOF' > "${FAILLOCK_CONFIG_FILE}"
Name: Lock out accounts after failed logins
Default: yes
Priority: 900
Auth-Type: Primary
Auth:
	[success=1 default=ignore]	pam_faillock.so preauth audit silent deny=5 unlock_time=900
	required			pam_faillock.so authfail audit deny=5 unlock_time=900
Account-Type: Primary
Account:
	required			pam_faillock.so
EOF
        echo "--> faillock config file created."
    fi
    echo "--> Enabling faillock profile with pam-auth-update..."
    pam-auth-update --enable faillock
    echo "--> pam-auth-update executed."
    echo "--> Removing old tally log files..."
    rm -f /var/log/faillog /var/log/tallylog
    echo "--> PAM configuration upgrade complete."
}

# Vim plugin cleanup
handle_vim_plugin_cleanup() {
    log "Performing User-Specific Configuration Cleanup (Vim)"
    VIMRC_FILE="/root/.vimrc"
    if [ ! -f "${VIMRC_FILE}" ]; then
        echo "--> ${VIMRC_FILE} not found. Skipping Vim plugin cleanup."
        return
    fi
    PLUGINS_TO_DISABLE=("tpope/vim-fugitive" "Yggdroot/indentLine")
    changes_made=false
    for plugin in "${PLUGINS_TO_DISABLE[@]}"; do
        if grep -q "^\s*Plug '${plugin}'" "${VIMRC_FILE}"; then
            if ! $changes_made; then
                VIMRC_BACKUP="/root/.vimrc.bak.$(date +%F-%T)"
                cp "${VIMRC_FILE}" "${VIMRC_BACKUP}"
                changes_made=true
            fi
            sed -i.vim-cleanup "s|^\s*Plug '${plugin}'|\"&|" "${VIMRC_FILE}"
        fi
    done
    if $changes_made; then
        if command -v vim &> /dev/null; then
            vim -u "${VIMRC_FILE}" -c "try | PlugClean! | catch | endtry" -c "qa!"
        fi
    fi
    echo "--> Vim cleanup complete."
}

# AIDE configuration
configure_aide() {
    log "Configuring AIDE Ignore Rules"
    AIDE_CONF="/etc/aide/aide.conf"
    if [ ! -f "${AIDE_CONF}" ]; then
        echo "--> AIDE config file (${AIDE_CONF}) not found. Skipping this step."
        return
    fi
    cp "${AIDE_CONF}" "${AIDE_CONF}.bak.$(date +%F-%T)"
    RULES_TO_ADD=("!/var/log" "!/run" "!/tmp" "!/data")
    for rule in "${RULES_TO_ADD[@]}"; do
        if ! grep -qF -- "${rule}" "${AIDE_CONF}"; then
            echo "${rule}" >> "${AIDE_CONF}"
        fi
    done
    echo "--> AIDE configuration complete."
}

# Release upgrade execution
run_release_upgrade() {
    log "Preparing for Release Upgrade (20.04 -> 22.04)"
    echo "--> Verifying environment proxy (${ENV_PROXY_URL}) connectivity..."
    if http_proxy="${ENV_PROXY_URL}" https_proxy="${ENV_PROXY_URL}" curl --head --fail --silent --output /dev/null --connect-timeout 15 http://changelogs.ubuntu.com; then
        echo "--> Proxy verification successful."
    else
        log "Error: Proxy Verification Failed!"
        exit 1
    fi
    echo "WARNING! The operating system release upgrade is about to begin."
    read -p "Have you read the warning and wish to continue? (y/N): " choice
    case "$choice" in
      y|Y )
        mount -o remount,exec /tmp
        export http_proxy="${ENV_PROXY_URL}"
        export https_proxy="${ENV_PROXY_URL}"
        DEBIAN_FRONTEND=noninteractive do-release-upgrade -f DistUpgradeViewNonInteractive
        ;;
      * )
        echo "Operation cancelled by user."
        exit 0
        ;;
    esac
}

# --- Main Execution Block ---
main() {
    check_root
    check_ca_content
    setup_proxy
    install_and_update_ca
    stabilize_system
    update_pam_configuration_standard
    handle_vim_plugin_cleanup
    configure_aide
    run_release_upgrade
    log "Stage 1 upgrade process has been initiated. After it completes, please REBOOT, then run the stage 2 script."
}

main
exit 0
EOF_PART1
) > upgrade_20_to_22.sh

# =======================================================================================
#
#   Script 2: upgrade_22_to_24.sh (For upgrading from 22.04 to 24.04)
#
# =======================================================================================

(
cat <<'EOF_PART2'
#!/bin/bash

# =======================================================================================
#
#          *** Part 2: Automated Script for Upgrading from Ubuntu 22.04 to 24.04 ***
#
# =======================================================================================

# --- Global Settings & Constants ---
set -e
APT_PROXY_URL="http://10.33.35.10:3142"
ENV_PROXY_URL="http://10.33.35.10:8080"
CA_CERT_FILENAME="root-ca.crt"
CA_CERT_PATH="/usr/local/share/ca-certificates/${CA_CERT_FILENAME}"

#
# ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼【 USER CONFIGURATION AREA 】▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
#
CA_CERT_CONTENT="""
-----BEGIN CERTIFICATE-----
*** PASTE YOUR CA CERTIFICATE CONTENT HERE ***
-----END CERTIFICATE-----
"""
#
# ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲【 END OF CONFIGURATION 】▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲
#

# --- Function Definitions ---
log() {
    echo ""
    echo "=================================================="
    echo " $1"
    echo "=================================================="
    echo ""
}

check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "Error: This script must be run with root privileges. Please use 'sudo ./<script_name>'" >&2
        exit 1
    fi
}

check_ca_content() {
    if [[ "$CA_CERT_CONTENT" == *"PASTE YOUR CA CERTIFICATE CONTENT HERE"* ]]; then
        log "Error: Please edit this script file first."
        exit 1
    fi
}

run_with_retry() {
    local cmd="$1"
    local retries=3
    local count=0
    local wait_time=10
    until eval "$cmd"; do
        count=$((count + 1))
        if [ $count -lt $retries ]; then
            sleep $wait_time
        else
            exit 1
        fi
    done
}

setup_proxy() {
    cat <<EOF > /etc/apt/apt.conf.d/99proxy
Acquire::http::Proxy "${APT_PROXY_URL}";
Acquire::https::Proxy "${APT_PROXY_URL}";
Acquire::ftp::Proxy "${APT_PROXY_URL}";
EOF
    grep -qxF "http_proxy=\"${ENV_PROXY_URL}\"" /etc/environment || echo "http_proxy=\"${ENV_PROXY_URL}\"" >> /etc/environment
    grep -qxF "https_proxy=\"${ENV_PROXY_URL}\"" /etc/environment || echo "https_proxy=\"${ENV_PROXY_URL}\"" >> /etc/environment
}

install_and_update_ca() {
    echo "${CA_CERT_CONTENT}" > "${CA_CERT_PATH}"
    chmod 644 "${CA_CERT_PATH}"
    update-ca-certificates
}

verify_proxy_and_ca() {
    log "Verifying Proxy and CA Certificate Settings"
    if [ ! -f "/etc/apt/apt.conf.d/99proxy" ]; then
        setup_proxy
    fi
    if [ ! -f "${CA_CERT_PATH}" ]; then
        install_and_update_ca
    fi
}

stabilize_system() {
    log "Stabilizing System and Performing Deep Clean"
    run_with_retry "apt-get update"
    run_with_retry "DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::=\"--force-confold\" upgrade -y"
    run_with_retry "DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::=\"--force-confold\" dist-upgrade -y"
    DEBIAN_FRONTEND=noninteractive apt-get --fix-broken install -y
    dpkg --configure -a
    DEBIAN_FRONTEND=noninteractive apt-get autoremove --purge -y
    apt-get clean
    echo "--> System stabilization and cleanup complete."
}

run_release_upgrade() {
    log "Preparing for Release Upgrade (22.04 -> 24.04)"
    if http_proxy="${ENV_PROXY_URL}" https_proxy="${ENV_PROXY_URL}" curl --head --fail --silent --output /dev/null --connect-timeout 15 http://changelogs.ubuntu.com; then
        echo "--> Proxy verification successful."
    else
        log "Error: Proxy Verification Failed!"
        exit 1
    fi
    read -p "Have you read the warning and wish to continue? (y/N): " choice
    case "$choice" in
      y|Y )
        mount -o remount,exec /tmp
        export http_proxy="${ENV_PROXY_URL}"
        export https_proxy="${ENV_PROXY_URL}"
        DEBIAN_FRONTEND=noninteractive do-release-upgrade -f DistUpgradeViewNonInteractive
        ;;
      * )
        exit 0
        ;;
    esac
}

# --- Main Execution Block ---
main() {
    check_root
    check_ca_content
    verify_proxy_and_ca
    stabilize_system
    run_release_upgrade
    log "Stage 2 upgrade process has been initiated. Please reboot after completion."
}

main
exit 0
EOF_PART2
) > upgrade_22_to_24.sh

chmod +x upgrade_20_to_22.sh
chmod +x upgrade_22_to_24.sh

echo "Successfully created two upgrade scripts with separated proxies and auto-retry:"
echo "1. upgrade_20_to_22.sh (for upgrading from 20.04 to 22.04)"
echo "2. upgrade_22_to_24.sh (for upgrading from 22.04 to 24.04)"
echo ""
echo "Instructions:"
echo "1. Edit both files and fill in your CA certificate content."
echo "2. First, on your 20.04 system, run: sudo ./upgrade_20_to_22.sh"
echo "3. After the upgrade is complete and you have rebooted, run on the new 22.04 system: sudo ./upgrade_22_to_24.sh"

